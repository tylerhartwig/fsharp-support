options {
  parserPackage="JetBrains.ReSharper.Plugins.FSharp.Psi.Gen";
  parserClassName="FSharpParserGenerated";
  psiInterfacePackageName="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree";
  psiStubsPackageName="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree";
  psiStubsBaseClass="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree.FSharpCompositeElement";
  tokenClassName="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree.FSharpToken";
  tokenTypePackageName="JetBrains.ReSharper.Plugins.FSharp.Psi.Parsing";
  tokenTypeClassName="FSharpTokenType";
  parserTargetSubdir="Parsing/FSharp";
  psiInterfacesTargetSubdir="Psi/FSharp";
  psiStubsTargetSubdir="Psi/FSharp/Impl";
  elementTypePrefix="";
  visitorClassName="TreeNodeVisitor";
  visitorMethodSuffix="";
  disableReflection;
  separateHierarchies;
  acceptModifier="";
  visitorSuperClassName="JetBrains.ReSharper.Plugins.FSharp.Psi.TreeNodeVisitorBase";
  "treeElementClassFQName"="JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement";
  "leafElementClassFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree.FSharpLeafElement";
  "compositeElementClassFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree.FSharpCompositeElement";
  "psiElementVisitorClassFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree.TreeNodeVisitor";
  "unexpectedTokenClassFQName"="Parsing.UnexpectedToken";
  "syntaxErrorClassFQName"="Parsing.SyntaxError";
  "parserGenRuntimePackageName"="Parsing";
  "createTokenElementMethodFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Factory.createTokenElement";
  "visitMethodPrefix"="Visit";
  "lexerClassName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Parsing.FSharpLexer";
  "psiClassesPrefix"="";
  "psiElementClassFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree.IFSharpTreeNode";
  customImplPackage="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree";
  customInterfacePackage="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree";
  "interfaceNamePrefix"="I";
  "tokenElementClassFQName"="JetBrains.ReSharper.Psi.Tree.ITokenNode";
  "customImplSuffix"="";
  "objectClassFQName"="System.Object";
  publicChildRolePrefix="FS_";
  tokenBitsetThreshold=4;
  elementTypeBaseClass="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree.FSharpCompositeNodeType";
  parserMessagesClass="JetBrains.ReSharper.Plugins.FSharp.Psi.Parsing.ParserMessages";
  generateWorkingPsi;
}



// Files

interface fSharpFile options { customParseFunction; noInternalParseFunction; }:
  fSharpImplFile |
  fSharpSigFile;

fSharpImplFile options { stubBase="FSharpFileBase"; }:
  topLevelModuleOrNamespaceDeclaration<MODULE_OR_NAMESPACE_DECLARATION, Declarations>*;

fSharpSigFile options { stubBase="FSharpFileBase"; }:
  topLevelModuleOrNamespaceDeclaration<MODULE_OR_NAMESPACE_DECLARATION, Declarations>*;



// Modules and namespaces

interface fSharpDeclaration:
  moduleLikeDeclaration |
  moduleMemberDeclaration |
  fSharpTypeDeclaration;

interface moduleLikeDeclaration:
  topLevelModuleOrNamespaceDeclaration |
  nestedModuleDeclaration;

interface topLevelModuleOrNamespaceDeclaration:
  topLevelModuleDeclaration |
  fSharpNamespaceDeclaration |
  fSharpGlobalNamespaceDeclaration;

fSharpNamespaceDeclaration options { stubBase="FSharpDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  moduleMember<MODULE_MEMBER, Members>*;

fSharpGlobalNamespaceDeclaration options { stubBase="FSharpDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  longIdentifier<LONG_IDENTIFIER, LongIdentifier> // should be empty, needed here for common interface
  moduleMember<MODULE_MEMBER, Members>*
  fakeSeparator;

topLevelModuleDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  moduleMember<MODULE_MEMBER, Members>*
  fakeSeparator;

moduleOrNamespaceSignature: fakeSeparator;



// Module members

interface moduleMember:
  moduleMemberDeclaration |
  moduleMemberStatement |
  memberDeclaration |
  hashDirective |
  typeExtension |
  otherModuleMember;

interface moduleMemberDeclaration:
  nestedModuleDeclaration |
  fSharpTypeDeclaration |
  let |
  moduleAbbreviation |
  otherMemberDeclaration;

interface moduleMemberStatement:
  openStatement |
  do;

typeExtension:
  namedTypeExpression<EXTENDED_TYPE, ExtendedType>
  memberDeclaration<TYPE_MEMBER, TypeMembers>* fakeSeparator;

interface fSharpTypeDeclaration:
  exceptionDeclaration |
  simpleTypeDeclaration |
  objectModelTypeDeclaration |
  nestedTypeUnionCaseDeclaration;

interface simpleTypeDeclaration:
  enumDeclaration |
  recordDeclaration |
  unionDeclaration |
  notCompiledTypeDeclaration;

interface notCompiledTypeDeclaration:
  typeAbbreviationDeclaration |
  moduleAbbreviation |
  abstractTypeDeclaration |
  otherSimpleTypeDeclaration;

interface objectModelTypeDeclaration:
  classDeclaration |
  interfaceDeclaration |
  structDeclaration |
  objectTypeDeclaration;

nestedModuleDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>
  moduleMember<MODULE_MEMBER, Members>*;



// Enums

enumDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<enumDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  enumMemberDeclaration<ENUM_MEMBER, EnumMembers>*
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

enumMemberDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  fSharpIdentifier<IDENTIFIER, Identifier>;



// Records

recordDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<recordDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fieldDeclaration<RECORD_FIELD, Fields>*
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

fieldDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  fSharpIdentifier<IDENTIFIER, Identifier>;



// Discriminated unions

unionCasesList:
  modifier{ACCESS_MODIFIER, Modifier}?
  unionCaseDeclaration<UNION_CASE, UnionCases>*;

unionDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<unionDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
  get { methodName="UnionCases" path=<unionDeclaration:UNION_CASES_LIST/unionCasesList:UNION_CASE> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  unionCasesList<UNION_CASES_LIST, UnionCasesList>
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;


interface unionCaseDeclaration:
  singletonCaseDeclaration |
  nestedTypeUnionCaseDeclaration;

singletonCaseDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>;

nestedTypeUnionCaseDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<nestedTypeUnionCaseDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>
  fieldDeclaration<UNION_FIELD, Fields>*
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;



// Other members

exceptionDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<exceptionDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

typeAbbreviationDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<typeAbbreviationDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

moduleAbbreviation options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<moduleAbbreviation:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

let options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  fSharpIdentifier<IDENTIFIER, Identifier>
  activePatternCaseDeclaration<ACTIVE_PATTERN_CASE, Cases>*
  body<BODY, Body>;

body:
  fakeSeparator;

activePatternCaseDeclaration options { stubBase="FSharpDeclarationBase"; }:
   fSharpIdentifier<IDENTIFIER, Identifier>;

otherMemberDeclaration:
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>;

otherSimpleTypeDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<otherSimpleTypeDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

abstractTypeDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<abstractTypeDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;


// Object model type declarations

classDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<classDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

interfaceDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<interfaceDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

structDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<structDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

objectTypeDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<objectTypeDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  fSharpIdentifier<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

interface fSharpTypeMemberDeclaration:
  implicitConstructorDeclaration |
  constructorDeclaration |
  typeInherit |
  interfaceImplementation |
  interfaceInherit |
  abstractSlot |
  memberDeclaration |
  typeLetBindings |
  valField |
  autoProperty |

  otherTypeMember;

interfaceInherit: namedTypeExpression<INTERFACE_TYPE, InterfaceType>;
typeInherit: namedTypeExpression<BASE_TYPE, BaseType>;

interfaceImplementation:
  namedTypeExpression<INTERFACE_TYPE, InterfaceType>
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>* fakeSeparator;


otherTypeMember: fakeSeparator;
typeLetBindings: fakeSeparator;

implicitConstructorDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  memberParam<PARAMETER, Parameters>* fakeSeparator;

constructorDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  localDeclaration<PARAMETER, Parameters>* fakeSeparator
  NEW<NEW, NewKeyword>;



// todo: fix properties with explicit setters

memberDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<memberDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfMethodList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  fSharpIdentifier<IDENTIFIER, Identifier>
  typeParameterOfMethodList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  memberParam<PARAMETER, Parameters>* fakeSeparator;

abstractSlot options { stubBase="FSharpProperTypeMemberDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<abstractSlot:TYPE_PARAMETERS_LIST/typeParameterOfMethodList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  fSharpIdentifier<IDENTIFIER, Identifier>
  typeParameterOfMethodList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  memberParam<PARAMETER, Parameters>* fakeSeparator;

valField options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  fSharpIdentifier<IDENTIFIER, Identifier>;

autoProperty options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  fSharpIdentifier<IDENTIFIER, Identifier>;

memberParam: fakeSeparator;


// module statements

hashDirective:
  HASH<HASH, HashToken>
  STRING<STRING, Args>*; 

openStatement:
  OPEN<OPEN, Open>
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>;

do: fakeSeparator;

otherModuleMember: fakeSeparator;



// Identifiers

fSharpIdentifier: IDENTIFIER<IDENTIFIER, IdentifierToken>;

longIdentifier: IDENTIFIER<IDENTIFIER, Identifiers>*;



// Type parameters

typeParameterOfTypeList:
  LESS<LESS,LAngle>
  typeParameterOfTypeDeclaration<TYPE_PARAMETER, TypeParameters>*
  GREATER<GREATER,RAngle>;

typeParameterOfMethodList:
  LESS<LESS,LAngle>
  typeParameterOfMethodDeclaration<TYPE_PARAMETER, TypeParameters>*
  GREATER<GREATER,RAngle>;

typeArgumentList:
  LESS<LESS,LAngle>
  GREATER<GREATER,RAngle>;

typeParameterOfTypeDeclaration options { stubBase="FSharpDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  fSharpIdentifier<IDENTIFIER, Identifier>;

typeParameterOfMethodDeclaration options { stubBase="FSharpDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  fSharpIdentifier<IDENTIFIER, Identifier>;


// Access modifiers

accessModifiers: modifier{ACCESS_MODIFIER, Modifiers}*;

private modifier{ROLE,Getter}:
  PUBLIC<@ROLE,@Getter> |
  PRIVATE<@ROLE,@Getter> |
  INTERNAL<@ROLE,@Getter>;



// Attributes

fSharpAttribute:
  longIdentifier<IDENTIFIER, LongIdentifier>
  argExpression<ARG_EXPRESSION, ArgExpression>
;

argExpression:
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  STRING<STRING, String>;
// todo: cover more cases (this is a temp mock for the only case we actually look at it now)


fakeSeparator: FAKE;

// Local declarations

localDeclaration options { stubBase="FSharpDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  fSharpIdentifier<IDENTIFIER, Identifier>;


typeExpression:
  namedTypeExpression |
  otherTypeExpression;


namedTypeExpression:
  longIdentifier<LONG_IDENTIFIER, LongIdentifier> fakeSeparator
  typeArgumentList?;

otherTypeExpression: FAKE;